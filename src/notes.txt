TODO
1.class InterfaceElementWithStats : public InterfaceElement at line 130 file interface_element.hpp



Chapter 1 The Role of Game Designer

This chapter will answer the questions below:
    1.what does it take to be a game designer?
    2.what what kinds of talents and skills do you need?
    3.what will be ecpected of you during the process?
    4.what is the best method for design games? 

1.Playcentric:
    Use interative design method of "playcentric" to judge 
    the success of game play based on player ecperiences.
    
2.Advocate of player:
    Game designer must look at the game  world through the players' eyes
    solid gameplay hooks players other than graphics, storylines and so on.
    
3.Playtester: 
    3.0 Inviting players "over play" and listening to what they say as they
        experience your game is the best way to understand how your game working.
    3.1 By watching other people play the game, you learn a grat deal.
    3.2 Pay attentions to what objects they are focused on, where they 
        click or move the cursor when they get stuck or frustrated or bored, 
        and write down everything they tell you.Gaug reactons, interpret silent moments, 
        study their feedbacks,and match them with your game elements.
        
4.Become Better Player
    4.1 write the analysis in a game journal tht elp you think about your play ecperiences
        and also remember the details of your gameplay long afterwards.
    4.2 not review the game features but discuss a meaningful moment og gameplay. 
    4.3 try to remember that moment in details:
        4.3.0 why did it strike you?
        4.3.1 what do you think,feel or do?
        4.3.2 what are the underlying mechanics that made the moment work?
5 Creativity: 
    what matters is not the spark of an idea but what you do with that idea once it emerges, 
    and this is where the playcentrc process accouts for.
    
    
    
    
ï¼‘ did war gaming need c++ developers to develop a branch-new back-end system from screech or  maintain and improve the existing back-end code base?


Apply Actor Pattern
a single process architecture can easily have bottleneck of bussiness logics when there are a huge of number of entities in AOI. 
the feature of dynamic load balance does not work well when there are a huge number of player gathering together in a small area on the map
due to the limited calculation ability of a single cpu core. One possible solution is to apply actor pattern with the powers of multi-cores 
on the same server machine. In addition, application of actor pattern does not introduce any extra difficulties for dizaster recovery or 
entity backup. Below is a very draft implementations:
a single network thread used for reliable transfer, sending and receiving request or reply messages;
multi script threads (assume 5, each of them keeps a script interpretor ptr) used as encoder and decoder of messages, calling emtity method and updating entity properties
lock free spsc message queues(must have same number to scrip threads, which is 5 right here) 
used for communications between network thread and scrip threads;
struct java_message_info_t
{
    jobject obj;
    jmethodID mtd;
    jfieldID field;
    jvalue* args;
};
struct python_message_info_t
{
    PyObject* obj;
    PyObject* mtd;
    PyObject* field;
    PyObject* args;
};
...other scrip language are skipped over

Apply memory serilizations with (de)compression
big world uses zlib as real time (de)compression method for external channel, which is not the best choice.
based on the formular:
Time=1/Ratio+ActualBandwidth*(1/DecompressVelocity+1/CompressVelocity).
LZF3.6 http://oldhome.schmorp.de/marc/liblzf.html is best option to achieve highest network throughput when bandwidth < 133 Mbps
(the bandwidth most game clients have).In addition, bw lacks of a high granularity serilization method. 
e.g. I can do this ushort player_health = 25; WriteCompress(player_health); which only uses 5 bits 

Apply One Reply Bit in Msg Flag
Use one bit in msg flag to tell a reply message instead of 4-byte-long REPLY_IDENTITY 
so that we can reuse the same msg id with reply bit 1 or 0  to decode message correctly.

Apply Robust High performance UDP-TUNNELED-SCTP (please refer to RFC 4960)
UDP-TUNNELED-SCTP is the perfect network solution with different levels of reliabilities.
It supports reliable-ordered, reliable-unordered, unreliable-ordered and unreliable-unordered transfer.
However, BW only supports two of them, which are reliable-ordered and unreliable-unordered.
BW's reliable transfer is so coupled with business logics, which makes it so hard to reuse.
BW reliable transfer module has no congestion control(vital weakness!).

Apply stronger encryption
Secured connection based on key-exchange.
key exchange methods (RAS & DH).
encrption methods (DES_CBC, 3DES_CBC, ASE128,AES192).
Hash methods (MD5, SHA-1).
